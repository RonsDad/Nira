"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/test-flip-cards/page",{

/***/ "(app-pages-browser)/./src/components/ui/flip-card-carousel/CardContent.tsx":
/*!**************************************************************!*\
  !*** ./src/components/ui/flip-card-carousel/CardContent.tsx ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CardContent: () => (/* binding */ CardContent),\n/* harmony export */   createCardTexture: () => (/* binding */ createCardTexture)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n\n\nfunction createCardTexture(content, isFront) {\n    let width = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1024, height = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1536;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        throw new Error('Could not get canvas context');\n    }\n    // Enable better text rendering\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n    // ROUNDED CORNERS FUNCTION\n    function roundRect(ctx, x, y, w, h, r) {\n        ctx.beginPath();\n        ctx.moveTo(x + r, y);\n        ctx.arcTo(x + w, y, x + w, y + h, r);\n        ctx.arcTo(x + w, y + h, x, y + h, r);\n        ctx.arcTo(x, y + h, x, y, r);\n        ctx.arcTo(x, y, x + w, y, r);\n        ctx.closePath();\n    }\n    if (isFront) {\n        // ROUNDED CORNERS WITH CLIPPING\n        const borderRadius = width * 0.04;\n        roundRect(ctx, 0, 0, width, height, borderRadius);\n        ctx.clip();\n        // Blue gradient background - FULL CARD\n        const gradient = ctx.createLinearGradient(0, 0, 0, height);\n        gradient.addColorStop(0, '#07015D');\n        gradient.addColorStop(1, '#050022');\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, width, height);\n        // GLASSMORPHIC OVERLAY\n        const glassGradient = ctx.createLinearGradient(0, 0, width, height);\n        glassGradient.addColorStop(0, 'rgba(255, 255, 255, 0.15)');\n        glassGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.05)');\n        glassGradient.addColorStop(1, 'rgba(255, 255, 255, 0.1)');\n        ctx.fillStyle = glassGradient;\n        ctx.fillRect(0, 0, width, height);\n        // White border with rounded corners\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.lineWidth = 6;\n        roundRect(ctx, 12, 12, width - 24, height - 24, borderRadius - 12);\n        ctx.stroke();\n        // Label - USING PROPER FONT\n        if (content.label) {\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.font = \"600 \".concat(width * 0.04, 'px \"Crimson Pro\", serif');\n            ctx.textAlign = 'left';\n            ctx.letterSpacing = '4px';\n            ctx.fillText(content.label.toUpperCase(), width * 0.08, height * 0.08);\n        }\n        // Title - USING PLAYFAIR DISPLAY AND TAKING UP MORE SPACE\n        ctx.fillStyle = '#ffffff';\n        ctx.font = \"700 \".concat(width * 0.12, 'px \"Playfair Display\", serif'); // EVEN BIGGER\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        // Word wrap for title\n        const words = content.title.split(' ');\n        const lineHeight = width * 0.14; // More spacing\n        const lines = [];\n        let currentLine = '';\n        const maxWidth = width * 0.85;\n        const yStart = height * 0.5;\n        for(let n = 0; n < words.length; n++){\n            const testLine = currentLine + words[n] + ' ';\n            const metrics = ctx.measureText(testLine);\n            const testWidth = metrics.width;\n            if (testWidth > maxWidth && n > 0) {\n                lines.push(currentLine.trim());\n                currentLine = words[n] + ' ';\n            } else {\n                currentLine = testLine;\n            }\n        }\n        lines.push(currentLine.trim());\n        // Add subtle shadow for text\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n        ctx.shadowBlur = 6;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n        lines.forEach((line, index)=>{\n            ctx.fillText(line, width / 2, yStart + index * lineHeight);\n        });\n        // Reset shadow\n        ctx.shadowColor = 'transparent';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n    } else {\n        // ROUNDED CORNERS WITH CLIPPING\n        const borderRadius = width * 0.04;\n        roundRect(ctx, 0, 0, width, height, borderRadius);\n        ctx.clip();\n        // Back of card - Blue gradient background FULL CARD\n        const gradient = ctx.createLinearGradient(0, 0, 0, height);\n        gradient.addColorStop(0, '#07015D');\n        gradient.addColorStop(1, '#050022');\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, width, height);\n        // GLASSMORPHIC OVERLAY\n        const glassGradient = ctx.createLinearGradient(0, 0, width, height);\n        glassGradient.addColorStop(0, 'rgba(255, 255, 255, 0.12)');\n        glassGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.03)');\n        glassGradient.addColorStop(1, 'rgba(255, 255, 255, 0.08)');\n        ctx.fillStyle = glassGradient;\n        ctx.fillRect(0, 0, width, height);\n        // White border with rounded corners\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.lineWidth = 6;\n        roundRect(ctx, 12, 12, width - 24, height - 24, borderRadius - 12);\n        ctx.stroke();\n        // Content text - USING CRIMSON PRO FONT AND BIGGER SIZE\n        ctx.fillStyle = '#ffffff';\n        const fontSize = Math.floor(width * 0.065); // MUCH BIGGER font\n        ctx.font = \"400 \".concat(fontSize, 'px \"Crimson Pro\", serif');\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'top';\n        // Word wrap for content\n        const words = content.text.split(' ');\n        const lineHeight = fontSize * 1.6; // More line spacing\n        const lines = [];\n        let currentLine = '';\n        const paddedWidth = width * 0.85;\n        const maxWidth = paddedWidth;\n        const textX = width * 0.08;\n        const textY = height * 0.1;\n        for(let n = 0; n < words.length; n++){\n            const testLine = currentLine + words[n] + ' ';\n            const metrics = ctx.measureText(testLine);\n            const testWidth = metrics.width;\n            if (testWidth > maxWidth && n > 0) {\n                lines.push(currentLine.trim());\n                currentLine = words[n] + ' ';\n            } else {\n                currentLine = testLine;\n            }\n        }\n        lines.push(currentLine.trim());\n        // Add shadow for better readability\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n        ctx.shadowBlur = 4;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n        lines.forEach((line, index)=>{\n            ctx.fillText(line, textX, textY + index * lineHeight);\n        });\n        // Reset shadow\n        ctx.shadowColor = 'transparent';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n    }\n    const texture = new three__WEBPACK_IMPORTED_MODULE_1__.CanvasTexture(canvas);\n    texture.needsUpdate = true;\n    texture.minFilter = three__WEBPACK_IMPORTED_MODULE_1__.LinearFilter;\n    texture.magFilter = three__WEBPACK_IMPORTED_MODULE_1__.LinearFilter;\n    return texture;\n}\nconst CardContent = (param)=>{\n    let { text, isFront, width, height } = param;\n    return null;\n};\n_c = CardContent;\nvar _c;\n$RefreshReg$(_c, \"CardContent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/ui/flip-card-carousel/CardContent.tsx\n"));

/***/ })

});